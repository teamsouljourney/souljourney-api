{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "REST API",
    "description": "backend",
    "contact": {
      "name": "Soul Journey Developer Team"
    },
    "license": {
      "name": "ISC"
    }
  },
  "host": "127.0.0.1:8000",
  "basePath": "/",
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "Token": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "Simple Token Authentication * Example: <b>Token ...tokenKey...</b>"
    },
    "Bearer": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "JWT Authentication * Example: <b>Bearer ...jwtToken...</b>"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Signup",
        "description": "Create a new user account and send a verification email.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "testUser"
                },
                "firstName": {
                  "type": "string",
                  "example": "John"
                },
                "lastName": {
                  "type": "string",
                  "example": "Doe"
                },
                "email": {
                  "type": "string",
                  "example": "test@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "password123"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/auth/verify-email": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Verify Email",
        "description": "Verify a user",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "description": "Verification token from email.",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "testUser"
                },
                "password": {
                  "type": "string",
                  "example": "password123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login",
        "description": "Login with username (or email) and password to get Token and JWT.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "testUser"
                },
                "password": {
                  "type": "string",
                  "example": "password123"
                }
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout",
        "description": "Logout user by deleting or blacklisting the token.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/auth/forgotPassword": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Forgot Password",
        "description": "Send a reset password token to the user",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "example": "newPassword123"
                },
                "passwordConfirm": {
                  "type": "string",
                  "example": "newPassword123"
                },
                "verificationCode": {
                  "type": "string",
                  "example": "123456"
                }
              }
            }
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "description": "Password reset token provided in the URL.",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/auth/reset-password/{token}": {
      "patch": {
        "tags": [
          "Authentication"
        ],
        "summary": "Reset Password",
        "description": "Reset user password using a valid reset token and verification code.",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Password reset token provided in the URL."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "example": "newPassword123"
                },
                "passwordConfirm": {
                  "type": "string",
                  "example": "newPassword123"
                },
                "verificationCode": {
                  "type": "string",
                  "example": "123456"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "tags": [
          "Google Authentication"
        ],
        "summary": "Google Authentication Request",
        "description": "Initiates Google OAuth2 authentication process.",
        "responses": {
          "302": {
            "description": "Redirects to Google authentication page."
          }
        }
      }
    },
    "/auth/oauth2/callback/google": {
      "get": {
        "tags": [
          "Google Authentication"
        ],
        "summary": "Google OAuth2 Callback",
        "description": "Handles the callback from Google after authentication.",
        "responses": {
          "302": {
            "description": "Redirects to the success or failure page based on authentication result.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "string",
                  "example": "Redirects to CLIENT_URL/auth/success"
                },
                "failure": {
                  "type": "string",
                  "example": "Redirects to CLIENT_URL/auth/failure"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List Users",
        "description": "\r  You can use <u>filter[] & search[] & sort[] & page & limit</u> queries with endpoint.\r  <ul> Examples:\r  <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>\r  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r  <li>URL/?<b>sort[field1]=asc&sort[field2]=desc</b></li>\r  <li>URL/?<b>limit=10&page=1</b></li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create User",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userName": {
                  "type": "string",
                  "example": "test"
                },
                "password": {
                  "type": "string",
                  "example": "aA!123456"
                },
                "email": {
                  "type": "string",
                  "example": "test@site.com"
                },
                "firstName": {
                  "type": "string",
                  "example": "test"
                },
                "lastName": {
                  "type": "string",
                  "example": "test"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Read User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userName": {
                  "type": "string",
                  "example": "test"
                },
                "email": {
                  "type": "string",
                  "example": "test@site.com"
                },
                "firstName": {
                  "type": "string",
                  "example": "test"
                },
                "lastName": {
                  "type": "string",
                  "example": "test"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userName": {
                  "type": "string",
                  "example": "test"
                },
                "email": {
                  "type": "string",
                  "example": "test@site.com"
                },
                "firstName": {
                  "type": "string",
                  "example": "test"
                },
                "lastName": {
                  "type": "string",
                  "example": "test"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/users/{id}/status": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Change User Status",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/{id}/updateMe": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "firstName": {
                  "type": "string",
                  "example": "test"
                },
                "lastName": {
                  "type": "string",
                  "example": "test"
                },
                "image": {
                  "type": "string",
                  "example": "test"
                },
                "phone": {
                  "type": "string",
                  "example": "test"
                },
                "address": {
                  "type": "string",
                  "example": "test"
                },
                "profession": {
                  "type": "string",
                  "example": "test"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/users/{id}/changeMyPassword": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "currentPassword": {
                  "type": "string",
                  "example": "***"
                },
                "newPassword": {
                  "type": "string",
                  "example": "***"
                },
                "retypePassword": {
                  "type": "string",
                  "example": "***"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/users/{id}/upload-profile-picture": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Upload User Profile Picture",
        "description": "",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "image",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "User profile picture"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/appointments/": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get all appointments",
        "description": "Fetch a list of all appointments, with optional userId and therapistId population.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Create a new appointment",
        "description": "Create and save a new appointment in the database.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Appointment data to create.",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "string"
                },
                "therapistId": {
                  "type": "string",
                  "example": "string"
                },
                "appointmentDate": {
                  "type": "string",
                  "example": "date"
                },
                "startTime": {
                  "type": "string",
                  "example": "date"
                },
                "endTime": {
                  "type": "string",
                  "example": "date"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/appointments/{id}": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get appointment by ID",
        "description": "Fetch an appointment by its unique ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the appointment to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Appointment"
        ],
        "summary": "Update appointment by ID",
        "description": "Update an appointment\\'s details by its unique ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the appointment to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Updated appointment data.",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "string"
                },
                "therapistId": {
                  "type": "string",
                  "example": "string"
                },
                "appointmentDate": {
                  "type": "string",
                  "example": "date"
                },
                "endTime": {
                  "type": "string",
                  "example": "date"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Appointment"
        ],
        "summary": "Delete Appointment",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "tags": [
          "Appointment"
        ],
        "summary": "Update appointment by ID",
        "description": "Update an appointment\\'s details by its unique ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the appointment to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Updated appointment data.",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "string"
                },
                "therapistId": {
                  "type": "string",
                  "example": "string"
                },
                "appointmentDate": {
                  "type": "string",
                  "example": "date"
                },
                "endTime": {
                  "type": "string",
                  "example": "date"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/appointments/user/{id}": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get user or therapist appointments",
        "description": "Fetch a list of appointments for a specific user or therapist, based on their role.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the user or therapist to fetch appointments for."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/blogs/": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "List Blogs",
        "description": "\r  You can use <u>filter[] & search[] & sort[] & page & limit</u> queries with endpoint.\r  <ul> Examples:\r  <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>\r  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r  <li>URL/?<b>sort[field1]=asc&sort[field2]=desc</b></li>\r  <li>URL/?<b>limit=10&page=1</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Blogs"
        ],
        "summary": "Create Blog",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Blog"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/blogs/{id}": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "Get Single Blog",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Blogs"
        ],
        "summary": "Update an existing blog post",
        "description": "Updates the blog post. Only the therapist who created the post can update it.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        },
                        "example": {
                          "type": "string",
                          "example": "Updated Blog Title"
                        }
                      }
                    },
                    "content": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        },
                        "example": {
                          "type": "string",
                          "example": "Updated blog content"
                        }
                      }
                    },
                    "image": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        },
                        "example": {
                          "type": "string",
                          "example": "https://example.com/updated-image.jpg"
                        }
                      }
                    },
                    "categoryId": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        },
                        "example": {
                          "type": "string",
                          "example": "5f50c31b2b8f07c1f1e6e89c"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Blogs"
        ],
        "summary": "Delete Blog",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Blogs"
        ],
        "summary": "Update an existing blog post",
        "description": "Updates the blog post. Only the therapist who created the post can update it.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        },
                        "example": {
                          "type": "string",
                          "example": "Updated Blog Title"
                        }
                      }
                    },
                    "content": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        },
                        "example": {
                          "type": "string",
                          "example": "Updated blog content"
                        }
                      }
                    },
                    "image": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        },
                        "example": {
                          "type": "string",
                          "example": "https://example.com/updated-image.jpg"
                        }
                      }
                    },
                    "categoryId": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        },
                        "example": {
                          "type": "string",
                          "example": "5f50c31b2b8f07c1f1e6e89c"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/blogs/{id}/likes": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "Get Like Info",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Blogs"
        ],
        "summary": "Add/Remove Like",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/categories/": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "List Categories",
        "description": "\r  You can use <u>filter[] & search[] & sort[] & page & limit</u> queries with endpoint.\r  <ul> Examples:\r   <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>\r   <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r   <li>URL/?<b>sort[field1]=asc&sort[field2]=desc</b></li>\r   <li>URL/?<b>limit=10&page=1</b></li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Create Category",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Read Category",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Category"
        ],
        "summary": "Update Category",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Category"
        ],
        "summary": "Delete Category",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Category"
        ],
        "summary": "Update Category",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/feedbacks/": {
      "get": {
        "tags": [
          "Feedbacks"
        ],
        "summary": "List Feedbacks",
        "description": "\r  You can use <u>filter[] & search[] & sort[] & page & limit</u> queries with endpoint.\r  <ul> Examples:\r  <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>\r  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r  <li>URL/?<b>sort[field1]=asc&sort[field2]=desc</b></li>\r  <li>URL/?<b>limit=10&page=1</b></li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Feedbacks"
        ],
        "summary": "Create Feedback",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Feedback"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/feedbacks/{id}": {
      "get": {
        "tags": [
          "Feedbacks"
        ],
        "summary": "Get Single Feedback",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Feedbacks"
        ],
        "summary": "Update Feedback",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Feedback"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Feedbacks"
        ],
        "summary": "Delete Feedback",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Feedbacks"
        ],
        "summary": "Update Feedback",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Feedback"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/feedbacks/therapists/{therapistId}": {
      "get": {
        "tags": [
          "Feedbacks"
        ],
        "summary": "Get Single Therapist Feedbacks",
        "description": "Fetch all feedback/reviews for a specific therapist.",
        "parameters": [
          {
            "name": "therapistId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the therapist to fetch feedbacks for."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/notes/": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "List Notes",
        "description": "\r  You can use <u>filter[] & search[] & sort[] & page & limit</u> queries with endpoint.\r  <ul> Examples:\r  <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>\r  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r  <li>URL/?<b>sort[field1]=asc&sort[field2]=desc</b></li>\r  <li>URL/?<b>limit=10&page=1</b></li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Create a new note",
        "description": "Create and save a new note in the database.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Notes data to create.",
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "example": "string"
                },
                "userId": {
                  "type": "string",
                  "example": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/notes/{id}": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Get a note by ID",
        "description": "Retrieve a specific note using its unique ID, with userId populated.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the note to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Notes"
        ],
        "summary": "Update note by ID",
        "description": "Update a note",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the note to delete."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Updated note data.",
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "example": "string"
                }
              }
            }
          },
          {
            "name": "therapistId",
            "in": "path",
            "required": true,
            "description": "ID of the user to fetch notes for.",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "Notes"
        ],
        "summary": "Delete a note by ID",
        "description": "Remove a note from the database using its unique ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the note to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Notes"
        ],
        "summary": "Update note by ID",
        "description": "Update a note",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the note to delete."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Updated note data.",
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "example": "string"
                }
              }
            }
          },
          {
            "name": "therapistId",
            "in": "path",
            "required": true,
            "description": "ID of the user to fetch notes for.",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/notes/user/{userId}": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Get Single Therapist Notes",
        "description": "Fetch all notes/reviews for a specific therapist.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "therapistId",
            "in": "path",
            "required": true,
            "description": "ID of the user to fetch notes for.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/therapists/": {
      "get": {
        "tags": [
          "Therapists"
        ],
        "summary": "List Therapists",
        "description": "\r  You can send query with endpoint for search[], sort[], page and limit.\r  <ul> Examples:\r  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r  <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>\r  <li>URL/?<b>page=2&limit=1</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Therapists"
        ],
        "summary": "Create Therapist",
        "description": "Create a new therapist entry with their details.",
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/therapists/{id}": {
      "get": {
        "tags": [
          "Therapists"
        ],
        "summary": "Get Single Therapist",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Therapists"
        ],
        "summary": "Update Therapist",
        "description": "This endpoint allows you to update the therapist's information, including their personal details, description, image, and category.",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "in": {
                  "example": "any"
                },
                "required": {
                  "example": "any"
                },
                "schema": {
                  "example": "any"
                },
                "lastName": {
                  "example": "any"
                },
                "email": {
                  "example": "any"
                },
                "password": {
                  "example": "any"
                },
                "image": {
                  "example": "any"
                },
                "categoryId": {
                  "example": "any"
                },
                "description": {
                  "example": "any"
                },
                "isActive": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Therapists"
        ],
        "summary": "Delete Therapist",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Therapists"
        ],
        "summary": "Update Therapist",
        "description": "This endpoint allows you to update the therapist's information, including their personal details, description, image, and category.",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "in": {
                  "example": "any"
                },
                "required": {
                  "example": "any"
                },
                "schema": {
                  "example": "any"
                },
                "lastName": {
                  "example": "any"
                },
                "email": {
                  "example": "any"
                },
                "password": {
                  "example": "any"
                },
                "image": {
                  "example": "any"
                },
                "categoryId": {
                  "example": "any"
                },
                "description": {
                  "example": "any"
                },
                "isActive": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/therapists/{id}/status": {
      "patch": {
        "tags": [
          "Therapists"
        ],
        "summary": "Change Therapist Status",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/therapists/{id}/updateMe": {
      "patch": {
        "tags": [
          "Therapists"
        ],
        "summary": "Update Therapist",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "firstName": {
                  "type": "string",
                  "example": "test"
                },
                "lastName": {
                  "type": "string",
                  "example": "test"
                },
                "image": {
                  "type": "string",
                  "example": "test"
                },
                "description": {
                  "type": "string",
                  "example": "test"
                },
                "experience": {
                  "type": "string",
                  "example": "test"
                },
                "graduation": {
                  "type": "string",
                  "example": "test"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/therapists/{id}/changeMyPassword": {
      "patch": {
        "tags": [
          "Therapists"
        ],
        "summary": "Update Therapist",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "currentPassword": {
                  "type": "string",
                  "example": "***"
                },
                "newPassword": {
                  "type": "string",
                  "example": "***"
                },
                "retypePassword": {
                  "type": "string",
                  "example": "***"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/therapists/{id}/upload-profile-picture": {
      "post": {
        "tags": [
          "Therapists"
        ],
        "summary": "Upload Therapist Profile Picture",
        "description": "",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "image",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "Therapist profile picture"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/therapist-time-tables/": {
      "get": {
        "tags": [
          "TherapistTimeTable"
        ],
        "summary": "Get all therapist time tables",
        "description": "Fetch a list of all therapist time tables, with optional therapistId population.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "TherapistTimeTable"
        ],
        "summary": "Create a new therapist time table",
        "description": "Create and save a new therapist time table in the database.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Therapist time table data to create.",
            "schema": {
              "type": "object",
              "properties": {
                "therapistId": {
                  "type": "string",
                  "example": "string"
                },
                "availableDates": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "type": "string",
                        "example": "string (ISO format)"
                      },
                      "startTime": {
                        "type": "string",
                        "example": "string (HH:mm)"
                      },
                      "endTime": {
                        "type": "string",
                        "example": "string (HH:mm)"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/therapist-time-tables/{id}": {
      "get": {
        "tags": [
          "TherapistTimeTable"
        ],
        "summary": "Get therapist time table by ID",
        "description": "Fetch a therapist time table by its unique ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the therapist time table to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "TherapistTimeTable"
        ],
        "summary": "Update therapist time table by ID",
        "description": "Update a therapist time table details by its unique ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the therapist time table to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Updated therapist time table data.",
            "schema": {
              "type": "object",
              "properties": {
                "therapistId": {
                  "type": "string",
                  "example": "string"
                },
                "availableDates": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "type": "string",
                        "example": "string (ISO format)"
                      },
                      "startTime": {
                        "type": "string",
                        "example": "string (HH:mm)"
                      },
                      "endTime": {
                        "type": "string",
                        "example": "string (HH:mm)"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      },
      "delete": {
        "tags": [
          "TherapistTimeTable"
        ],
        "summary": "Delete therapist time table by ID",
        "description": "Delete a therapist time table from the database by its unique ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the therapist time table to delete."
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "TherapistTimeTable"
        ],
        "summary": "Update therapist time table by ID",
        "description": "Update a therapist time table details by its unique ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the therapist time table to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Updated therapist time table data.",
            "schema": {
              "type": "object",
              "properties": {
                "therapistId": {
                  "type": "string",
                  "example": "string"
                },
                "availableDates": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "type": "string",
                        "example": "string (ISO format)"
                      },
                      "startTime": {
                        "type": "string",
                        "example": "string (HH:mm)"
                      },
                      "endTime": {
                        "type": "string",
                        "example": "string (HH:mm)"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/messages/": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "List Messages",
        "description": "\r  You can use <u>filter[] & search[] & sort[] & page & limit</u> queries with endpoint.\r  <ul> Examples:\r  <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>\r  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r  <li>URL/?<b>sort[field1]=asc&sort[field2]=desc</b></li>\r  <li>URL/?<b>limit=10&page=1</b></li>\r  </ul>\r  ",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "type": "string"
          },
          {
            "name": "userModel",
            "in": "query",
            "type": "string"
          },
          {
            "name": "chatWithId",
            "in": "query",
            "type": "string"
          },
          {
            "name": "chatWithModel",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Create Message",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/messages/{id}": {
      "put": {
        "tags": [
          "Messages"
        ],
        "summary": "Mark As Seen",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "messageId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Messages"
        ],
        "summary": "Delete Message",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/notifications/": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "List Notifications",
        "description": "\r  You can use <u>filter[] & search[] & sort[] & page & limit</u> queries with endpoint.\r  <ul> Examples:\r  <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>\r  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>\r  <li>URL/?<b>sort[field1]=asc&sort[field2]=desc</b></li>\r  <li>URL/?<b>limit=10&page=1</b></li>\r  </ul>\r  ",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Create Notification",
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/notifications/{id}": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Read Notifications by Receiver",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "recieverId",
            "in": "query",
            "description": "ID of the receiver",
            "required": true,
            "type": "string"
          },
          {
            "name": "recieverModel",
            "in": "query",
            "description": "Model type of the receiver (Therapist or User)",
            "required": true,
            "enum": [
              "Therapist",
              "User"
            ],
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Notifications"
        ],
        "summary": "Mark Notification as Read",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Notification ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Notifications"
        ],
        "summary": "Delete Notification",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Notification ID"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "definitions": {
    "Appointment": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "therapistId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Therapist"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "appointmentDate": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "startTime": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "endTime": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "videoCallUrl": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {}
          }
        }
      }
    },
    "Blog": {
      "type": "object",
      "properties": {
        "therapistId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Therapist"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "categoryId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Category"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "title": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "content": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "array",
              "example": [
                true,
                "Content is required!"
              ],
              "items": {
                "type": "string"
              }
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "image": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "likes": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "function"
              },
              "ref": {
                "type": "string",
                "example": "User"
              }
            }
          }
        },
        "countOfVisitors": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "number",
              "example": 0
            }
          }
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "name": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "Feedback": {
      "type": "object",
      "properties": {
        "title": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "rating": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "min": {
              "type": "number",
              "example": 1
            },
            "max": {
              "type": "number",
              "example": 5
            }
          }
        },
        "comment": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "userId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "therapistId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Therapist"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "senderId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "senderModel": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "enum": {
              "type": "array",
              "example": [
                "Therapist",
                "User"
              ],
              "items": {
                "type": "string"
              }
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "recieverId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "recieverModel": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "enum": {
              "type": "array",
              "example": [
                "Therapist",
                "User"
              ],
              "items": {
                "type": "string"
              }
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "content": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "seen": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        }
      }
    },
    "Notes": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "required": {
              "type": "array",
              "example": [
                true,
                "User ID is required"
              ],
              "items": {
                "type": "string"
              }
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "therapistId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Therapist"
            },
            "required": {
              "type": "array",
              "example": [
                true,
                "User ID is required"
              ],
              "items": {
                "type": "string"
              }
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "content": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "array",
              "example": [
                true,
                "Content is required"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "Therapist": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "lastName": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "email": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            },
            "validate": {
              "type": "array",
              "example": [
                null,
                "Email format is not valid"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "password": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "validate": {
              "type": "object",
              "properties": {
                "validator": {
                  "type": "function"
                },
                "message": {
                  "type": "string",
                  "example": "Password must be at least 8 characters long and include at least one lowercase letter, one uppercase letter, one number, and one special character."
                }
              }
            }
          }
        },
        "image": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "string",
              "example": ""
            }
          }
        },
        "categoryId": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "function"
              },
              "ref": {
                "type": "string",
                "example": "Category"
              },
              "required": {
                "type": "boolean",
                "example": true
              }
            }
          }
        },
        "feedbackId": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "function"
              },
              "ref": {
                "type": "string",
                "example": "Feedback"
              }
            }
          }
        },
        "notifications": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "function"
              },
              "ref": {
                "type": "string",
                "example": "Notification"
              }
            }
          }
        },
        "description": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "experience": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "graduation": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "isActive": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "isTherapist": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "isOnline": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "lastSeen": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "function"
            }
          }
        },
        "passwordResetToken": {
          "type": "function"
        },
        "passwordResetExpires": {
          "type": "function"
        },
        "verificationCode": {
          "type": "function"
        },
        "verificationCodeExpires": {
          "type": "function"
        }
      }
    },
    "TherapistTimeTable": {
      "type": "object",
      "properties": {
        "therapistId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Therapist"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "unavailableDates": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "date": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "function"
                  },
                  "required": {
                    "type": "boolean",
                    "example": true
                  }
                }
              },
              "startTime": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "function"
                  },
                  "required": {
                    "type": "boolean",
                    "example": true
                  }
                }
              },
              "endTime": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "function"
                  },
                  "required": {
                    "type": "boolean",
                    "example": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "Token": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "User"
            },
            "default": {},
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "therapistId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Therapist"
            },
            "default": {},
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "userType": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "enum": {
              "type": "array",
              "example": [
                "User",
                "Therapist"
              ],
              "items": {
                "type": "string"
              }
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "token": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "array",
              "example": [
                true,
                "Token is required"
              ],
              "items": {
                "type": "string"
              }
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "googleId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "unique": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "userName": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "array",
              "example": [
                true,
                "Username is required"
              ],
              "items": {
                "type": "string"
              }
            },
            "unique": {
              "type": "boolean",
              "example": true
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "index": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "password": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "validate": {
              "type": "object",
              "properties": {
                "validator": {
                  "type": "function"
                },
                "message": {
                  "type": "string",
                  "example": "Password must be at least 8 characters long and include at least one lowercase letter, one uppercase letter, one number, and one special character."
                }
              }
            }
          }
        },
        "email": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "index": {
              "type": "boolean",
              "example": true
            },
            "validate": {
              "type": "array",
              "example": [
                null,
                "Please provide a valid e-mail!"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "firstName": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "array",
              "example": [
                true,
                "First name is required"
              ],
              "items": {
                "type": "string"
              }
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "lastName": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "array",
              "example": [
                true,
                "Last name is required"
              ],
              "items": {
                "type": "string"
              }
            },
            "trim": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "image": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "default": {
              "type": "string",
              "example": ""
            }
          }
        },
        "phone": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "address": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "default": {
              "type": "string",
              "example": ""
            }
          }
        },
        "profession": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "default": {
              "type": "string",
              "example": ""
            }
          }
        },
        "isActive": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "isAdmin": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "isTherapist": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "isStaff": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "isEmailVerified": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "isOnline": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "lastSeen": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "function"
            }
          }
        },
        "notifications": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "function"
              },
              "ref": {
                "type": "string",
                "example": "Notification"
              }
            }
          }
        },
        "passwordResetToken": {
          "type": "function"
        },
        "passwordResetExpires": {
          "type": "function"
        },
        "verificationCode": {
          "type": "function"
        },
        "verificationCodeExpires": {
          "type": "function"
        }
      }
    }
  },
  "security": [
    {
      "Token": []
    },
    {
      "Bearer": []
    }
  ]
}